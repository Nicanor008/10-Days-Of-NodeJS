openapi: 3.0.0
info:
  version: 1.0.1
  title: Auth Module API documentation
  description: This is an API for the auth and users. Developed due to the re-usability required for the APIs authentication and authorization.
servers:
  - url: '{protocol}://127.0.0.1:{port}/'
    description: Development server (uses test data)
    variables:
      port:
        enum:
          - '4000'
          - '4001'
        default: '4001'
      protocol:
        enum:
          - 'http'
          - 'https'
        default: 'http'

components:
  schemas:
    errors:
      properties:
        description: Something went wrong. Try again

    User:
      type: object
      properties:
        name:
          type: String
          example: test Username
        email:
          type: String
          example: testUsername@gmail.com
        role:
          type: String
          example: user
        password:
          type: String
          example: AveryStrongPassword
        active:
          type: Boolean
          example: true
        verified:
          type: Boolean
          example: true
        pictureUrl:
          type: String
          example: ./images/1234.jpg

paths:
  /auth/register:
    post:
      summary: Regiter User
      description: Adds user to the users collection
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: String
                  example: test Username
                email:
                  type: String
                  example: testUsername@gmail.com
                role:
                  type: String
                  example: user
                password:
                  type: String
                  example: AveryStrongPassword
      responses:
        201:
          description: Account created. Check your email to activate account
        409:
          description: Email already  exist
        500:
          $ref: '#/components/schemas/errors/properties'
  
  /auth/verify/{email}:
    patch:
      summary: Verify account
      tags:
        - Users
      parameters:
        - in: path
          name: email
          description: User email used to create account
          required: true
          schema:
            type: string
      responses:
        200:
          description: Account has been verified
        404:
          description: Account :email does not exist
        500:
          $ref: '#/components/schemas/errors/properties'

  /auth/login:
    post:
      summary: Login Users
      description: authenticate users into the system
      tags:
        - Users
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: String
                  example: testUsername@gmail.com
                password:
                  type: String
                  example: AveryStrongPassword
      responses:
        200:
          description: Login successful
        403:
          description: Account has not been verified
        404:
          description: Email does not exist or Wrong password
        500:
          $ref: '#/components/schemas/errors/properties'
  /users:
    get:
      summary: Fetch all users
      tags:
        - Users
      responses:
        200:
          description: All users
        404: 
          description: No Users available
        500:
          $ref: '#/components/schemas/errors/properties'